@using BassinoLibrary.Helpers
@using BassinoLibrary.Resource
@using BassinoLibrary.ViewModels
@using Kendo.Mvc.UI

@model BassinoLibrary.ViewModels.ShipmentViewModel

@{
    Layout = "~/Views/Shared/_ModalLayout.cshtml";
}

@section Header
{
    @Helpers.ModalHeader(string.Format("{0} {1}", Resources.Edit, Resources.Shipment))
}

<script>
    $(document).ready(function () {
        $("#TotalKilos").prop('readonly', true);;
        $("#TotalPakages").prop('readonly', true);
        var d=  @Html.Raw(Json.Encode(@ViewBag.Cargas));
        var kilosTotal = 0;
       // debugger
        kilosTotal = parseFloat($("#TotalKilos").val());
        if(!kilosTotal>0){
        $.each( d, function (index, value) {
           sumData(value);
        });
    }
    });
    function getIdFrom() {
        return {
            text: $("#UbicationToId").val(),
            ubications: $("#UbicationsId").val(),
            edit:true
        };
    }

   function readRoute(vector) {
        $("#UbicationsId").val(vector);
        $('#Cargars').data('kendoMultiSelect').dataSource.read();
    }

    function selectFunction(e) {
        var dataItem = this.dataSource.view()[e.item.index()];
        alert("event :: select (" + dataItem.Text + " : " + dataItem.Value + ")");
    }
    function sumDataEdit(id) {
        $.ajax({
            type: "POST",
            url: "/Inbound/GetProductsPrice",
            datatype: "JSON",
            data: { text: id },
            success: function (data) {
               // $('#tableInboud tbody').append('<tr id=item_' + data.id + '><td>' + data.description + '</td><td>' + data.measure + '</td><td>' + data.quantity + "</td></tr>");
            }
        });
    }

    function sumData(id) {
        $.ajax({
            type: "POST",
            url: "/Inbound/GetProductsPrice",
            datatype: "JSON",
            data: { text: id },
            success: function (data) {
                var kilosTotal = 0;
                kilosTotal = parseFloat($("#TotalKilos").val());
                var totalPakage =0;
                totalPakage = parseFloat($("#TotalPakages").val());
                //var totalPakage = $("#TotalPakages").text();
                kilosTotal += parseFloat(data.kilos);
                totalPakage += parseFloat(1);
                $("#TotalKilos").val(kilosTotal);
                $("#TotalPakages").val(totalPakage);

                //$("#textbox1").removeAttr("disabled");
                $("#TotalPakages").text(totalPakage);


              //  $('#tableInboud tbody').append('<tr id=item_' + data.id + '><td>' + data.description + '</td><td>' + data.measure + '</td><td>' + data.quantity + "</td></tr>");
            }
        });
    }

    function removeItem(id) {
        $.ajax({
            type: "POST",
            url: "/Inbound/GetProductsPrice",
            data:{text:id},
            datatype: "JSON",
            success: function (data) {
                var kilosTotal = 0;
                kilosTotal = parseFloat($("#TotalKilos").val());
                var totalPakage = 0;
                totalPakage = parseFloat($("#TotalPakages").val());
                
                kilosTotal -= Number(data.kilos);
                totalPakage -= Number(1);
                $("#TotalKilos").val(kilosTotal);
                $("#TotalPakages").val(totalPakage);
                //$("#textbox1").removeAttr("disabled");
              //  $("#item_" + id).remove();
            }
        });
    }
    function saveCurrent(multi) {
        multi._savedOld = multi.value().slice(0);
    }
</script>
<fieldset @ViewBag.disable>
    @if (ViewBag.disable != null)
    {
        <div class="alert alert-warning alert-dismissable">
            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            <h4><i class="icon fa fa-warning"></i> Alert!</h4>
            @ViewBag.Message
        </div>
    }
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.Secuencia)
    @Html.PersonalDisplayFor(model => model.Car)
    <input type="hidden" id="UbicationsId" name="UbicationsId" value="@ViewBag.ubicationroutes">
    @(Html.AutocompleteFor<ShipmentViewModel, int?>(model => model.UbicationFrom)
          .TextField<UbicationViewModel>(diag => diag.DescriptionCompleta)
          .ValueField<UbicationViewModel>(diag => diag.Id)
          .Id(model => model.UbicationFromId)
          .Source("GetAutoComplete", "Ubication"))
    @(Html.AutocompleteFor<ShipmentViewModel, int?>(model => model.UbicationTo)
          .TextField<UbicationViewModel>(diag => diag.DescriptionCompleta)
          .ValueField<UbicationViewModel>(diag => diag.Id)
          .Id(model => model.UbicationToId)
          .Source("GetAutoComplete", "Ubication"))
    @if (ViewBag.disable == null)
    {
        @Html.Label("Ubicaciones Internas")
        @(Html.Kendo().MultiSelect()
              .Name("UbicationRoute")
          .DataTextField("UbicationName")
          .DataValueField("id")
         // .AutoBind(false)
              .Value(Model.UbicationRoute)
                  .Events(x => x.Select(@<text>
            function(e) {
            var vector=$("#UbicationsId").val();
            vector=vector +","+this.dataSource.view()[e.item.index()].id;
            $("#UbicationsId").val(vector);

            readRoute(vector);

            }
                </text>))
    .Events(x => x.Change(@<text>
            function (e) {

            var previous = this._savedOld;
            // These are current values.
            var current = this.value();
            // Let's save it for the next time
            saveCurrent(this);

            // The difference between previous and current are removed elements
            var diff = $(previous).not(current).get();
            if(diff.length>0){


            var vector=$("#UbicationsId").val();
            // vector=vector +","+diff[0];
            var i=','+diff[0];
            vector=vector.replace(i,'')
            $("#UbicationsId").val(vector);
            readRoute(vector);

            }

            // The difference between current and previous, are added elements
            diff = $(current).not(previous).get();
            console.log("added", diff);
            }
    </text>))
        //.Value(new[] { new { ProductName = "Chang", ProductID = 2 }, new { ProductName = "Uncle Bob's Organic Dried Pears", ProductID = 7 } })
              .DataSource(source =>
              {
                  source.Read(read =>
                  {
                      read.Action("GetUbications", "Shipment");
                  })
                  .ServerFiltering(true);
              })
              )
        
        @Html.Label("Cargas para Enviar")
        @(Html.Kendo().MultiSelect()
              .Name("Cargars") //The name of the multiselect is mandatory. It specifies the "id" attribute of the widget.
              .DataTextField("name") //Specifies which property of the Product to be used by the multiselect as a text.
              .DataValueField("id") //Specifies which property of the Product to be used by the multiselect as a value.
              //.Filter(FilterType.Contains)
              .Value(Model.Cargars)
               //    .AutoBind(true)
              .Events(e => e.Select(@<text>
                                          function(e) {

                                          var dataItem = this.dataSource.view()[e.item.index()];
                                          sumData(dataItem.id);

                                          }
                                       </text>)).Events(x => x.Change(@<text>
                                                                          function (e) {

                                                                          var previous = this._savedOld;
                                                                          // These are current values.
                                                                          var current = this.value();
                                                                          // Let's save it for the next time
                                                                          saveCurrent(this);

                                                                          // The difference between previous and current are removed elements
                                                                          var diff = $(previous).not(current).get();
                                                                          debugger
                                                                          if(diff.length>0)
                                                                          removeItem(diff[0]);

                                                                          // The difference between current and previous, are added elements
                                                                          diff = $(current).not(previous).get();
                                                                          console.log("added", diff);
                                                                          }
                                                                       </text>)).DataSource(source =>
              {
                  source.Read(read =>
                  {
                      read.Action("GetProducts", "Shipment").Data("getIdFrom"); //Set the Action and Controller name
                  })
                      .ServerFiltering(true); //If true the DataSource will not filter the data on the client.
              })
              )
    }
    @Html.PersonalTextAreaFor(model => model.Observations, "", 6)
    @Html.PersonalSEditorFor(model => model.TotalKilos)
    @Html.PersonalSEditorFor(model => model.TotalPakages)
  

</fieldset>
@section Footer
{
    @if (ViewBag.disable == null)
    {
        @Helpers.BotonesGuardarCancelarModal();
    }
   }
